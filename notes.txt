Autenticación tradicional vs JWT

Tradicional:
  -Al autenticarnos, se crea una sesión, cuyo ID se envía al navegador.
  -A partir de ahí, todas las peticiones tienen la cookie, que tiene almacenado el ID de la sesión
     y este es usado para verificar la sesión previamente activa.
  -Problemas:
    .Uno de los problemas que hay, es que las SPA no pueden refrescarse, entonces no pueden saber sí hubo
      cambios en la sesión.
    .Otro problema es que las REST API no deben tener estado. Al usar sesiones generamos estados.
    .Al usar arquitectura de microservicios, la sesión que solo existe en una maquina no fluye hacía los
      otros clientes (problema que tuvimos con el PORTAL CESA).
    .El control de acceso siempre requiere que vayamos a DB.
    .Controlar el uso de memoria es dificil, ya que cada cliente que se conecta genera una sesión, aumentando
      el uso de memoria.

JWT:
  -Al suceder la autenticación se firma un token.
  -Este se envía al cliente, y debe ser almacenado en memoria o en una cookie.
  -A partir de ahí, todas las peticiones llevan este token.
  -Las SPA no requieren del backend para saber sí esta autenticado.
  -El backend puede recibir multiples peticiones de multiples clientes y solo le interesa saber sí el
    JWT está bien firmado.